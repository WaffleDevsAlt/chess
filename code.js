var selectedpiece = {
  'id': undefined,
  'type': undefined,
  'color': undefined,
  'takeables': []
};
var whiteKing = 5
var blackKing = 61
var turn = 'w'
let moved = []
const path = 'data:image/png;base64,'
let defaultBoard = 'wrook,wknight,wbishop,wqueen,wking,wbishop,wknight,wrook,wpawn,wpawn,wpawn,wpawn,wpawn,wpawn,wpawn,wpawn,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,bpawn,bpawn,bpawn,bpawn,bpawn,bpawn,bpawn,bpawn,brook,bknight,bbishop,bqueen,bking,bbishop,bknight,brook'
let pieces = {
	wrook: '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',
  wknight: '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',
  wbishop: 'iVBORw0KGgoAAAANSUhEUgAAAFkAAABUCAYAAADplZtxAAAAAXNSR0IArs4c6QAAEvpJREFUeF7tnQesVEUbhuei9KrYAUFURFBREAVFFBUQsYMQEBV7YokNu7HEEnvvvaCJikalqdEgElBUsAKCgI0ignQBATl/ni/77j/MPXt379U9ezCeZNm77czMO9+8X52hzP13FR2BsqK38F8DbpMBef/994+++eYbt27dOle/fn23++67u/Hjx28S/U99J+vVqxf98ccfG62HatWquQ0bNth7O+20k5s9e3aqx5HqzlWrVi2KosjALCsrc4DLM+8BMg9eb7PNNm7BggWpHUtqO1ajRo0IauDabLPN3DHHHOP69OnjGjdu7GbOnOleffVV9/HHH7v169fbd/bbbz83ceLEVI4nlZ0CtM033zz666+/eHb33HOPO+OMM1ytWrWytLFq1Sp3/fXXuwcffNCAbtSokVu8eHEqx5PKTrVv3z766quvjA5atWrlxo4da5QANeiCMmbPnu169+7tZsyY4WrUqOH+/PPPVI4nlZ1q1apVNGvWLMOzc+fObvjw4Sap/gXIS5YscaeeeqobNWqUfbT33nu7yZMnp25MqesQYHXq1Cn69NNPDbidd97ZTZgwwW211VblQF64cKHr16+f++ijj0wp8t0ZM2akbkyp65CQlGVRs2ZN9/rrr7vDDjvMKMG3LkaPHu1OOeUUt3TpUle7dm3XunXr/yS5Ms5fzZo1zbqAFrbYYgt30003uV69ehnIgPree++ZQvz999/tO9ttt52bO3duKoUmlZ0SZXzyySdZZVenTh1Xt25dmyesiTVr1qDoTDki7WvWrEntWFLZsW7dukXwrLw6UYScEjkovObvzOepHIv1uTJLOInv1q5dO0JKBSiOCLEKJBmJrVevnlu9erX77bff3IoVKwxkgY65N3369NSNKVUdKisriyS11atXN2vh0ksvdXvssYd5eig3lN/atWvdjz/+6EaOHOleeukl9+uvv9p7cr2PPfZY98Ybb6RmbKnpCCsfM4wLRXfhhRe6k08+2W2//fbm9ckR0TNUgkT/8MMP7oUXXrAHJh2f80Dily1blorxpaITMtcAZ8cdd3R33nmnWRK40QI+F1VBFUTp4HDcbMKhKEZJ9bp160o+xpJ3wI+0NW/e3D3++OOuW7duFhTiAmQp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',
  wqueen: '',
  wking: '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',
  wpawn: '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',
  brook: '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',
  bknight: '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',
  bbishop: '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',
	bqueen: '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',
  bking: 'iVBORw0KGgoAAAANSUhEUgAAAFkAAABUCAYAAADplZtxAAAAAXNSR0IArs4c6QAAFS5JREFUeF7t3QeQVFXTBuCLwmdCxYARc8KAKGbMOQcUI2qZc06Ycy5jaZlzKFExAIoK5pxQFEEx56yIigqo89dzanrrMt/szs7s+Ln7F7dqatK95/Z5u/vtcM7stsva0DHDDDMUFl544ey1115r14bEztqMsFNOOWUBsIVCIfv777/bjNxkbjPCtmvXLoHs2HTTTbMHHnig7cjeVtxuiimmKLBix+abb54NHDhwMsj1Vh5LDpA322yzyZZcb4ATr00G+Z+AddIx8yCji0GDBk2mi3rDPtmS641omfEi8OHlyZxcI+CLL754Yfz48SkPjgAXQ/n8m2++SZ+3a9cum2aaabJZZ501vY7D6/h+ySWXbFWBsVXwGiqYYoopsr/++ivzXApyMfA1gFj6fR7g+G6XXXbJbrnlltYxvxoNr66XATmsshzAeZAbu3EAHda8zTbbZP37958McgDWp0+fwp133pn9+eefzbbkvPVGuR3P88wzT/bZZ5+1CoDbVFmtdxF8vf7662dDhgxpNSBWcus2I2i+rJZdTM6TK6m2hu+jQYQmNtlkk1aVPVSaTpu05MlduEpqrfF7dBGBbTLINYJY6bIIfM7baKONssGDB7cZL2wTgi6xxBKFd955p6FImWqqqbKVVlope+qpp9qE/K1ayA4dOhTkzuVK5/js77//zpTRI0eObLVzaZWC9ejRozB8+PCGPkb79u2zKaecsgFswJf2OIpleaucT6sTaoUVVii8+uqrqfnjsfTSS2cHHnhgtuyyy2adO3dOQI8ZMyZ78cUXs7POOiv79NNP03nR82iNi6ytCuS55pqr8PXXXycrZb0nnHBCdswxx2RTTz21Fer0CEA9s+gbb7wxu+yyy7K333674fvWBnSrAjnSNACyUgADVptzyJAh2ccff5wJequsskp6dOjQIYF+7bXXJqBHjRqVFKR38emnn7aaudVVkF69ehV++umnNHmuffvttzd7/Kmnnjr1kx2o4YUXXkiA3XXXXdnBBx+c/frrrw2WCth11lknu/nmm7PZZpstUQWgDzrooGTdvq/Gmsn9xRdfZL///ns2/fTTpzHvv//+ZsteKf1s0UD4c9iwYQ33iDZjBCWTj2O55ZbLXnnllUbvF70JAA0ePDhbb731MsFvzTXXzH777bdJ7mFc522wwQbZHXfckc0wwwwJ5HvvvTd79NFHK26AmWeeeQpfffVVGpOnxJGXP7p87rX22msbt2asarow8tZ8izGvzdImev59p06dsh9//PG/7hu9CaseH374YbKo3XffPbv77rsnadbnJ/+f//wne+6557Lu3bun219//fXZfvvtl16vscYak+TRDGLkyJFpYYC1e3aUa5k2tuLifn/88UfVmFV9Qfv27QshIM3TtKWghRZaKJtvvvkyIE6YMCFjKR4ffPBBcvWwkpjAvPPOi2PT/Xv27FkIelh88cWzt956K12zzDLLJB4OZUbQY30x3j777JNdeOGF2bTTTpusef/990/fLbrootno0aPbGZtHTJw4MYEbiwJSQrSw4IILZnPMMUe2wAILZEBEWR999FH2+eefJ2XLZMLiQyFkHDVqVLOxa/aJCy+8cMFN80KyoCOOOCLbcMMNEw/LCPIrFJQxbty4TEP+tttuSxkA3ssfu+22W/bwww83rOHttNNO2a233pqNHTs2m3POOdOkG1uOMs7KK6+c6GXGGWdsANnnkVeTB8DxmTFZOeUstdRSSW6Gks/Dye3BWB566KHsoosuylSc3ocsc889N0U0C79mnTTzzDMXfvzxxyQMoVnupZdemsDl3iyg9CBkCE444LLQ4447zq5MbtcgcCjG+UcffXR29tlnJwuaffbZ02TzvOk++XXAFVdcMSkJL5PpyCOPbKCB8ADjzjXXXMkgdtxxxySzR3hVjJeniaASSmYozzzzTHbIIYdkX375ZZLJubz3vffeq4hhxRN69+5duO+++9LAhJUePfDAA5ktrMClWQBSwi+//JIAYNEdO3ZM1OGcEJ5FoYHHH388gSGix7iRAwOKyxuTlUb+m1diKFv+TCl9+/ZNFkmBrC7Gcg0Z+vTpk9LBWWaZJaWAQXO+ByLZBdew+Ommmy6beeaZGxRBfkbx3XffZb17904B2bnkaE4WUxHk6B8AGHeJ3gB2Yze95JJLsgEDBmQ///xzcicTdC6ONEFLRSgBBxM+Job3Dj/88OzJJ59M1xXTruz888/PjjrqqAQ+Xtxzzz2TUkoDq7GuuuqqbMstt0z3ojxU88gjjyTupWgx4pprrslYu3PCY1imWHH11VenwImagB19EsrjGXYqkZFyKNH3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',
  bpawn: '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'
}

$('#1').addClass("wrook")
$('#2').addClass("wknight")
$('#3').addClass("wbishop")
$('#4').addClass("wqueen")
$('#5').addClass("wking")
$('#6').addClass("wbishop")
$('#7').addClass("wknight")
$('#8').addClass("wrook")
for (let a = 1; a <= 8; a++) {
  $('#' + (a + 8)).addClass("wpawn")
  $('#' + (a + 48)).addClass("bpawn")
}
$('#57').addClass("brook")
$('#58').addClass("bknight")
$('#59').addClass("bbishop")
$('#60').addClass("bqueen")
$('#61').addClass("bking")
$('#62').addClass("bbishop")
$('#63').addClass("bknight")
$('#64').addClass("brook")

function drawBoard(callMain) {
  if (turn == 'w') $('#result').html("It's White's turn!")
  if (turn == 'b') $('#result').html("It's Black's turn!")
  let lane = 1;
  for (let i = 1; i <= 64; i++) {
    if (lane % 2 == 0 && i % 2 == 1) $('#' + i).css('background-color', '#555')
    else if (lane % 2 == 1 && i % 2 == 0) $('#' + i).css('background-color', '#555')
    else $('#' + i).css('background-color', '#333')
    if (i % 8 == 0) {
      if (lane == 1) lane = 2;
      else if (lane == 2) lane = 1;
    }
    removePieceImage(i + "i")
    appendPieceImage(($('#' + i).attr('class')).slice(11), i, i + "i")
  }
}
drawBoard()

$('.chessboard').click(function() {
  let pieceType = ($(this).attr('class')).slice(12);
  let pieceColor = ($(this).attr('class')).slice(11, 12);
  let id = parseInt(this.id);
  let row = Math.floor((id + 7) / 8);
  let column = id % 8;
  logic(pieceType, pieceColor, id, row, column)
})

function logic(pieceType, pieceColor, id, row, column) {
  if (whiteKing == 'dead' || blackKing == 'dead') return;
  drawBoard()
  let takeables = []
  let check = ''
  for (let i = 1; i <= 64; i++) {
    let apieceType = ($(`#${i}`).attr('class')).slice(12);
    let apieceColor = ($(`#${i}`).attr('class')).slice(11, 12);
    var res = checkForCheck(apieceType, i, apieceColor)
    for (let i = 0; i <= res.length; i++) {
      if (res[i - 1] != undefined) takeables.push(res[i - 1])
    }
  }
  if (takeables.includes(whiteKing)) check = 'White';
  if (takeables.includes(blackKing)) check = 'Black';
  if (check != '') {
    $('#result').append('<br>' + check + '\'s king is in check!')
  }
  if ((selectedpiece.takeables).includes(id) == true) {
    if (turn == 'w') turn = 'b';
    else if (turn == 'b') turn = 'w';

    if (selectedpiece.type == 'rook' && pieceType == 'king' && pieceColor == selectedpiece.color && moved.includes(id) == false && moved.includes(selectedpiece.id) == false) {
      if (selectedpiece.id == 8 && id == 5 && pieceColor == 'w') {
        $('#6').addClass('wrook')
        $('#5').removeClass('wking')
        $('#7').addClass('wking')
        $('#8').removeClass('wrook')
        whiteKing = 7
      } else if (selectedpiece.id == 1 && id == 5 && pieceColor == 'w') {
        $('#4').addClass('wrook')
        $('#5').removeClass('wking')
        $('#3').addClass('wking')
        $('#1').removeClass('wrook')
        whiteKing = 3
      } else if (selectedpiece.id == 64 && id == 61 && pieceColor == 'b') {
        $('#62').addClass('brook')
        $('#61').removeClass('bking')
        $('#63').addClass('bking')
        $('#64').removeClass('brook')
        blackKing = 63
      } else if (selectedpiece.id == 57 && id == 61 && pieceColor == 'b') {
        $('#60').addClass('brook')
        $('#61').removeClass('bking')
        $('#59').addClass('bking')
        $('#57').removeClass('brook')
        blackKing = 59
      }
      drawBoard()
      selectedpiece = {
        'id': undefined,
        'type': undefined,
        'color': undefined,
        'takeables': []
      };
      takeables = []
      check = ''
      for (let i = 1; i <= 64; i++) {
        let apieceType = ($(`#${i}`).attr('class')).slice(12);
        let apieceColor = ($(`#${i}`).attr('class')).slice(11, 12);
        let res = checkForCheck(apieceType, i, apieceColor)
        for (let i = 0; i <= res.length; i++) {
          if (res[i - 1] != undefined) takeables.push(res[i - 1])
        }
      }
      if (takeables.includes(whiteKing)) check = 'White';
      if (takeables.includes(blackKing)) check = 'Black';
      if (check != '') {
        $('#result').append('<br>' + check + '\'s king is in check!')
      }
      return;
    }

    if (selectedpiece.type == 'king' && pieceType == 'rook' && pieceColor == selectedpiece.color && moved.includes(id) == false && moved.includes(selectedpiece.id) == false) {
      if (selectedpiece.id == 5 && id == 8 && pieceColor == 'w') {
        $('#6').addClass('wrook')
        $('#5').removeClass('wking')
        $('#7').addClass('wking')
        $('#8').removeClass('wrook')
        whiteKing = 7
      } else if (selectedpiece.id == 5 && id == 1 && pieceColor == 'w') {
        $('#4').addClass('wrook')
        $('#5').removeClass('wking')
        $('#3').addClass('wking')
        $('#1').removeClass('wrook')
        whiteKing = 3
      } else if (selectedpiece.id == 61 && id == 64 && pieceColor == 'b') {
        $('#62').addClass('brook')
        $('#61').removeClass('bking')
        $('#63').addClass('bking')
        $('#64').removeClass('brook')
        blackKing = 63
      } else if (selectedpiece.id == 61 && id == 57 && pieceColor == 'b') {
        $('#60').addClass('brook')
        $('#61').removeClass('bking')
        $('#59').addClass('bking')
        $('#57').removeClass('brook')
        blackKing = 59
      }
      moved.push(selectedpiece.id)
      moved.push(id)
      drawBoard()
      selectedpiece = {
        'id': undefined,
        'type': undefined,
        'color': undefined,
        'takeables': []
      };
      takeables = []
      check = ''
      for (let i = 1; i <= 64; i++) {
        let apieceType = ($(`#${i}`).attr('class')).slice(12);
        let apieceColor = ($(`#${i}`).attr('class')).slice(11, 12);
        let res = checkForCheck(apieceType, i, apieceColor)
        for (let i = 0; i <= res.length; i++) {
          if (res[i - 1] != undefined) takeables.push(res[i - 1])
        }
      }
      if (takeables.includes(whiteKing)) check = 'White';
      if (takeables.includes(blackKing)) check = 'Black';
      if (check != '') {
        $('#result').append('<br>' + check + '\'s king is in check!')
      }
      return;
    }

    $('#' + id).addClass(selectedpiece.color + selectedpiece.type)
    $('#' + id).removeClass(pieceColor + pieceType)
    $('#' + selectedpiece.id).removeClass(selectedpiece.color + selectedpiece.type)

    if (selectedpiece.type == 'pawn' && row == 1 || selectedpiece.type == 'pawn' && row == 8) {
      $('#' + id).addClass(selectedpiece.color + 'queen')
      $('#' + id).removeClass(selectedpiece.color + selectedpiece.type)
    }

    drawBoard()
    if (pieceType == 'king') {
      if (pieceColor == 'b') {
        $('#result').html('White won!')
        whiteKing = 'dead'
      }
      if (pieceColor == 'w') {
        $('#result').html('Black won!')
        blackKing = 'dead'
      }
    }
    if (selectedpiece.type == 'king') {
      if (selectedpiece.color == 'w') whiteKing = id;
      else if (selectedpiece.color == 'b') blackKing = id;
    }
    if (selectedpiece.type == 'rook') moved.push(id)
    if (selectedpiece.type == 'king') moved.push(id)
    selectedpiece = {
      'id': undefined,
      'type': undefined,
      'color': undefined,
      'takeables': []
    };
    takeables = []
    check = ''
    for (let i = 1; i <= 64; i++) {
      let apieceType = ($(`#${i}`).attr('class')).slice(12);
      let apieceColor = ($(`#${i}`).attr('class')).slice(11, 12);
      let res = checkForCheck(apieceType, i, apieceColor)
      for (let i = 0; i <= res.length; i++) {
        if (res[i - 1] != undefined) takeables.push(res[i - 1])
      }
    }
    if (takeables.includes(whiteKing)) check = 'White';
    if (takeables.includes(blackKing)) check = 'Black';
    if (check != '') {
      if (whiteKing == 'dead' || blackKing == 'dead') return;
      $('#result').append('<br>' + check + '\'s king is in check!')
    }
    return;
  }
  if (pieceColor != turn && pieceType != '') return;
  selectedpiece = {
    'id': id,
    'type': pieceType,
    'color': pieceColor,
    'takeables': []
  };
  if (pieceType != '') placeHighlights(id, '#777')

  //pawn highlighting
  if (pieceType == 'pawn') {
    if (pieceColor == 'b') {
      if (id - 8 <= 0) return;
      if (($('#' + (id - 8)).attr('class')).slice(12) == '') {
        placeHighlights((id - 8), '#885')
        if (id - 16 <= 0) return;
        if (($('#' + (id - 16)).attr('class')).slice(12) == '' && row == 7) {
          placeHighlights((id - 16), '#885')
        }
      }
      if (id - 9 > 0) {
        if (($('#' + (id - 9)).attr('class')).slice(11, 12) == 'w' && Math.floor(id - 2 / 8) == row - 1) {
          placeHighlights(id - 9, '#855')
        }
      }

      if (id - 7 > 0) {
        if (($('#' + (id - 7)).attr('class')).slice(11, 12) == 'w' && Math.floor(id / 8) == row - 1) {
          placeHighlights(id - 7, '#855')
        }
      }
    }
    if (pieceColor == 'w') {
      if (id + 8 > 64) return;
      if (($('#' + (id + 8)).attr('class')).slice(12) == '') {
        placeHighlights((id + 8), '#885')
        if (id + 16 > 64) return;
        if (($('#' + (id + 16)).attr('class')).slice(12) == '' && row == 2) {
          placeHighlights((id + 16), '#885')
        }
      }
      if (id + 9 <= 64) {
        if (($('#' + (id + 9)).attr('class')).slice(11, 12) == 'b' && Math.floor((id + 16) / 8) == row + 1) {
          placeHighlights(id + 9, '#855')
        }
      }

      if (id + 7 <= 64) {
        if (($('#' + (id + 7)).attr('class')).slice(11, 12) == 'b' && Math.floor((id + 14) / 8) == row + 1) {
          placeHighlights(id + 7, '#855')
        }
      }
    }
  }

  //knight highlighting
  if (pieceType == 'knight') {
    let knight = [6, 10, 15, 17]
    let krows = [1, 1, 2, 2]
    knight.forEach(function(i) {
      if (Math.floor((id + 7 + i) / 8) == row + krows[knight.indexOf(i)] && id + i <= 64) {
        if (($('#' + (id + i)).attr('class')).slice(11, 12) == 'w' && pieceColor == 'b' || ($('#' + (id + i)).attr('class')).slice(11, 12) == 'b' && pieceColor == 'w') {
          placeHighlights((id + i), '#855')
        }
        if (($('#' + (id + i)).attr('class')).slice(12) == '') {
          placeHighlights((id + i), '#885')
        }
      }
      if (Math.floor((id + 7 - i) / 8) == row - krows[knight.indexOf(i)] && id - i > 0) {
        if (($('#' + (id - i)).attr('class')).slice(11, 12) == 'w' && pieceColor == 'b' || ($('#' + (id - i)).attr('class')).slice(11, 12) == 'b' && pieceColor == 'w') {
          placeHighlights((id - i), '#855')
        }
        if (($('#' + (id - i)).attr('class')).slice(12) == '') {
          placeHighlights((id - i), '#885')
        }
      }
    })
  }

  //bishop highlighting
  if (pieceType == 'bishop' || pieceType == 'queen') {
    for (let a = 1; a < 8; a++) {
      let i = a * 9
      if (id + i <= 64 && Math.floor((id + 7 + i) / 8) == row + a) {
        if (($('#' + (id + i)).attr('class')).slice(11, 12) == 'w' && pieceColor == 'b' || ($('#' + (id + i)).attr('class')).slice(11, 12) == 'b' && pieceColor == 'w') {
          placeHighlights((id + i), '#855')
          break;
        }
        if (($('#' + (id + i)).attr('class')).slice(12) == '') {
          placeHighlights((id + i), '#885')
        } else break;
      }
    }
    for (let a = 1; a < 8; a++) {
      let i = a * 9
      if (id - i > 0 && Math.floor((id + 7 - i) / 8) == row - a) {
        if (($('#' + (id - i)).attr('class')).slice(11, 12) == 'w' && pieceColor == 'b' || ($('#' + (id - i)).attr('class')).slice(11, 12) == 'b' && pieceColor == 'w') {
          placeHighlights((id - i), '#855')
          break;
        }
        if (($('#' + (id - i)).attr('class')).slice(12) == '') {
          placeHighlights((id - i), '#885')
        } else break;
      }
    }

    for (let a = 1; a < 8; a++) {
      let i = a * 7
      if (id + i <= 64 && Math.floor((id + 7 + i) / 8) == row + a) {
        if (($('#' + (id + i)).attr('class')).slice(11, 12) == 'w' && pieceColor == 'b' || ($('#' + (id + i)).attr('class')).slice(11, 12) == 'b' && pieceColor == 'w') {
          placeHighlights((id + i), '#855')
          break;
        }
        if (($('#' + (id + i)).attr('class')).slice(12) == '') {
          placeHighlights((id + i), '#885')
        } else break;
      }
    }
    for (let a = 1; a < 8; a++) {
      let i = a * 7
      if (id - i > 0 && Math.floor((id + 7 - i) / 8) == row - a) {
        if (($('#' + (id - i)).attr('class')).slice(11, 12) == 'w' && pieceColor == 'b' || ($('#' + (id - i)).attr('class')).slice(11, 12) == 'b' && pieceColor == 'w') {
          placeHighlights((id - i), '#855')
          break;
        }
        if (($('#' + (id - i)).attr('class')).slice(12) == '') {
          placeHighlights((id - i), '#885')
        } else break;
      }
    }
  }

  //rook highlighting
  if (pieceType == 'rook' || pieceType == 'queen') {
    //right
    for (let i = 1; i <= 7; i++) {
      if (Math.floor((id + 7 + i) / 8) != row) break;
      if (id + i > 64) break;
      if (($('#' + (id + i)).attr('class')).slice(11, 12) == 'w' && pieceColor == 'b' || ($('#' + (id + i)).attr('class')).slice(11, 12) == 'b' && pieceColor == 'w') {
        placeHighlights((id + i), '#855')
        break;
      }
      if (($('#' + (id + i)).attr('class')).slice(11, 12) == pieceColor && ($('#' + (id + i)).attr('class')).slice(12) == 'king' && pieceType == 'rook' && moved.includes(id) == false) {
        placeHighlights((id + i), '#658')
      }
      if (($('#' + (id + i)).attr('class')).slice(12) == '') {
        placeHighlights((id + i), '#885')
      } else break;
    }
    //left
    for (let i = 1; i <= 7; i++) {
      if (Math.floor((id + 7 - i) / 8) != row) break;
      if (id - i <= 0) break;
      if (($('#' + (id - i)).attr('class')).slice(11, 12) == 'w' && pieceColor == 'b' || ($('#' + (id - i)).attr('class')).slice(11, 12) == 'b' && pieceColor == 'w') {
        placeHighlights((id - i), '#855')
        break;
      }
      if (($('#' + (id - i)).attr('class')).slice(11, 12) == pieceColor && ($('#' + (id - i)).attr('class')).slice(12) == 'king' && pieceType == 'rook' && moved.includes(id) == false) {
        placeHighlights((id - i), '#658')
      }
      if (($('#' + (id - i)).attr('class')).slice(12) == '' && Math.floor((id + 7 - i) / 8) == row) {
        placeHighlights((id - i), '#885')
      } else break;
    }
    //down
    for (let a = 1; a <= 7; a++) {
      let b = a * 8
      if (id + b > 64) break;
      if (($('#' + (id + b)).attr('class')).slice(11, 12) == 'w' && pieceColor == 'b' || ($('#' + (id + b)).attr('class')).slice(11, 12) == 'b' && pieceColor == 'w') {
        placeHighlights((id + b), '#855')
        break;
      }
      if (($('#' + (id + b)).attr('class')).slice(12) == '') {
        placeHighlights((id + b), '#885')
      } else break;
    }
    //up
    for (let a = 1; a <= 7; a++) {
      let b = a * 8
      if (id - b <= 0) break;
      if (($('#' + (id - b)).attr('class')).slice(11, 12) == 'w' && pieceColor == 'b' || ($('#' + (id - b)).attr('class')).slice(11, 12) == 'b' && pieceColor == 'w') {
        placeHighlights((id - b), '#855')
        break;
      }
      if (($('#' + (id - b)).attr('class')).slice(12) == '') {
        placeHighlights((id - b), '#885')
      } else break;
    }
  }

  //king highlighting
  if (pieceType == 'king' || pieceType == 'queen') {


    if (pieceType == 'king') {
      for (let i = 1; i <= 7; i++) {
        if (Math.floor((id + 7 + i) / 8) != row) break;
        if (id + i > 64) break;
        if (($('#' + (id + i)).attr('class')).slice(11, 12) == pieceColor && ($('#' + (id + i)).attr('class')).slice(12) == 'rook' && moved.includes(id) == false && moved.includes(5) == false) {
          placeHighlights((id + i), '#658')
        } else if (($('#' + (id + i)).attr('class')).slice(12) != '') break;
      }
      //left
      for (let i = 1; i <= 7; i++) {
        if (Math.floor((id + 7 - i) / 8) != row) break;
        if (id - i <= 0) break;
        if (($('#' + (id - i)).attr('class')).slice(11, 12) == pieceColor && ($('#' + (id - i)).attr('class')).slice(12) == 'rook' && moved.includes(id) == false && moved.includes(5) == false) {
          placeHighlights((id - i), '#658')
        } else if (($('#' + (id - i)).attr('class')).slice(12) != '') break;
      }
    }


    let king = [-9, -8, -7, -1, 1, 7, 8, 9]
    king.forEach(function(i) {
      if (id + i <= 0 || id + i > 64) return;
      if (i < -5 && Math.floor((id + 7 + i) / 8) != row - 1) return;
      if (i == -1 || i == 1)
        if (Math.floor((id + 7 + i) / 8) != row) return;
      if (i > 5 && Math.floor((id + 7 + i) / 8) != row + 1) return
      if (($('#' + (id + i)).attr('class')).slice(11, 12) == 'w' && pieceColor == 'b' || ($('#' + (id + i)).attr('class')).slice(11, 12) == 'b' && pieceColor == 'w') {
        placeHighlights((id + i), '#855')
      } else if (($('#' + (id + i)).attr('class')).slice(12) == '') {
        placeHighlights((id + i), '#885')
      } else return;
    })
  }

  moddedLogic(pieceType, pieceColor, id, row, column)
}

function checkForCheck(pieceType, id, pieceColor) {
  let row = Math.floor((id + 7) / 8);
  let column = id % 8
  let res = []

  //pawn highlighting
  if (pieceType == 'pawn') {
    if (pieceColor == 'b') {
      if (id - 9 > 0) {
        if (($('#' + (id - 9)).attr('class')).slice(12) != '' && Math.floor((id - 2) / 8) == row - 1 && ($('#' + (id - 9)).attr('class')).slice(11, 12) == 'w') {
          res.push(id - 9)
        }
      }
      if (id - 7 > 0) {
        if (($('#' + (id - 7)).attr('class')).slice(12) != '' && Math.floor((id) / 8) == row - 1 && ($('#' + (id - 7)).attr('class')).slice(11, 12) == 'w') {
          res.push(id - 7)
        }
      }
    }
    if (pieceColor == 'w') {
      if (id + 9 <= 64) {
        if (($('#' + (id + 9)).attr('class')).slice(12) != '' && Math.floor((id + 16) / 8) == row + 1 && ($('#' + (id + 9)).attr('class')).slice(11, 12) == 'b') {
          res.push(id + 9)
        }
      }
      if (id + 7 <= 64) {
        if (($('#' + (id + 7)).attr('class')).slice(12) != '' && Math.floor((id + 14) / 8) == row + 1 && ($('#' + (id + 7)).attr('class')).slice(11, 12) == 'b') {
          res.push(id + 7)
        }
      }
    }
  }

  //knight highlighting
  if (pieceType == 'knight') {
    let knight = [6, 10, 15, 17]
    let krows = [1, 1, 2, 2]
    knight.forEach(function(i) {
      if (Math.floor((id + 7 + i) / 8) == row + krows[knight.indexOf(i)] && id + i <= 64) {
        if (($('#' + (id + i)).attr('class')).slice(11, 12) == 'w' && pieceColor == 'b' || ($('#' + (id + i)).attr('class')).slice(11, 12) == 'b' && pieceColor == 'w') {
          res.push(id + i)
        }
      } else if (Math.floor((id + 7 - i) / 8) == row - krows[knight.indexOf(i)] && id - i > 0) {
        if (($('#' + (id - i)).attr('class')).slice(11, 12) == 'w' && pieceColor == 'b' || ($('#' + (id - i)).attr('class')).slice(11, 12) == 'b' && pieceColor == 'w') {
          res.push(id - i)
        }
      }
    })
  }

  //bishop highlighting
  if (pieceType == 'bishop' || pieceType == 'queen') {
    for (let a = 1; a < 8; a++) {
      let i = a * 9
      if (id + i <= 64 && Math.floor((id + 7 + i) / 8) == row + a) {
        if (($('#' + (id + i)).attr('class')).slice(11, 12) == 'w' && pieceColor == 'b' || ($('#' + (id + i)).attr('class')).slice(11, 12) == 'b' && pieceColor == 'w') {
          res.push(id + i)
          break;
        } else break;
      }
    }
    for (let a = 1; a < 8; a++) {
      let i = a * 9
      if (id - i > 0 && Math.floor((id + 7 - i) / 8) == row - a) {
        if (($('#' + (id - i)).attr('class')).slice(11, 12) == 'w' && pieceColor == 'b' || ($('#' + (id - i)).attr('class')).slice(11, 12) == 'b' && pieceColor == 'w') {
          res.push(id - i)
          break;
        } else break;
      }
    }

    for (let a = 1; a < 8; a++) {
      let i = a * 7
      if (id + i <= 64 && Math.floor((id + 7 + i) / 8) == row + a) {
        if (($('#' + (id + i)).attr('class')).slice(11, 12) == 'w' && pieceColor == 'b' || ($('#' + (id + i)).attr('class')).slice(11, 12) == 'b' && pieceColor == 'w') {
          res.push(id + i)
          break;
        } else break;
      }
    }
    for (let a = 1; a < 8; a++) {
      let i = a * 7
      if (id - i > 0 && Math.floor((id + 7 - i) / 8) == row - a) {
        if (($('#' + (id - i)).attr('class')).slice(11, 12) == 'w' && pieceColor == 'b' || ($('#' + (id - i)).attr('class')).slice(11, 12) == 'b' && pieceColor == 'w') {
          res.push(id - i)
          break;
        } else break;
      }
    }
  }

  //rook highlighting
  if (pieceType == 'rook' || pieceType == 'queen') {
    //right
    for (let i = 1; i <= 7; i++) {
      if (Math.floor((id + 7 + i) / 8) != row) break;
      if (id + i > 64) break;
      if (($('#' + (id + i)).attr('class')).slice(11, 12) == 'w' && pieceColor == 'b' || ($('#' + (id + i)).attr('class')).slice(11, 12) == 'b' && pieceColor == 'w') {
        res.push(id + i)
      }
      break;
    }
    //left
    for (let i = 1; i <= 7; i++) {
      if (Math.floor((id + 7 - i) / 8) != row) break;
      if (id - i <= 0) break;
      if (($('#' + (id - i)).attr('class')).slice(11, 12) == 'w' && pieceColor == 'b' || ($('#' + (id - i)).attr('class')).slice(11, 12) == 'b' && pieceColor == 'w') {
        res.push(id - i)
      }
      break;
    }
    //down
    for (let a = 1; a <= 7; a++) {
      let b = a * 8
      if (id + b > 64) break;
      if (($('#' + (id + b)).attr('class')).slice(11, 12) == 'w' && pieceColor == 'b' || ($('#' + (id + b)).attr('class')).slice(11, 12) == 'b' && pieceColor == 'w') {
        res.push(id + b)
      }
      break;
    }
    //up
    for (let a = 1; a <= 7; a++) {
      let b = a * 8
      if (id - b <= 0) break;
      if (($('#' + (id - b)).attr('class')).slice(11, 12) == 'w' && pieceColor == 'b' || ($('#' + (id - b)).attr('class')).slice(11, 12) == 'b' && pieceColor == 'w') {
        res.push(id - b)
      }
      break;
    }
  }

  //king highlighting
  if (pieceType == 'king' || pieceType == 'queen') {
    let king = [-9, -8, -7, -1, 1, 7, 8, 9]
    king.forEach(function(i) {
      if (id + i <= 0 || id + i > 64) return;
      if (i < -5 && Math.floor((id + 7 + i) / 8) != row - 1) return;
      if (i == -1 || i == 1)
        if (Math.floor((id + 7 + i) / 8) != row) return;
      if (i > 5 && Math.floor((id + 7 + i) / 8) != row + 1) return
      if (($('#' + (id + i)).attr('class')).slice(11, 12) == 'w' && pieceColor == 'b' || ($('#' + (id + i)).attr('class')).slice(11, 12) == 'b' && pieceColor == 'w') {
        res.push(id + i)
      } else return;
    })
  }
  
	//Debug
  /* for (let i = 0; i <= res.length; i++) {
    if (res[i - 1] != undefined) $('#' + res[i - 1]).css('background-color', 'blue');
  } */

  res.push(moddedCheckLogic(pieceType, pieceColor, id, row, column))
  return res;
}

function placeHighlights(id, color) {
  if (color != '#777') {
    selectedpiece.takeables.push(id);
  }
  if (color == '#885' && $('#' + id).css('background-color') == 'rgb(85, 85, 85)') {
    $('#' + id).css('background-color', '#996')
  }
  if (color == '#885' && $('#' + id).css('background-color') == 'rgb(51, 51, 51)') {
    $('#' + id).css('background-color', '#774')
  } else $('#' + id).css('background-color', color)
  selectedpiece.takeables.sort(function(a, b) {
    return a - b
  })
}

$('#reset').click(function() {
  turn = 'w'
  for (let i = 1; i <= 64; i++) {
    removePieceImage(i + "i")
    appendPieceImage(($('#' + i).attr('class')).slice(11), i, i + "i")
    $('#' + i).removeClass(($('#' + i).attr('class')).slice(11, 12) + ($('#' + i).attr('class')).slice(12))
  }
  blackKing = 61
  whiteKing = 5
  
  setBoard(defaultBoard)
  
  moddedReset()
})


//https://stackoverflow.com/a/37819523/17670831
function appendPieceImage(imageSource, containerId, imageId) {
  if (pieces[imageSource] != undefined) imageSource = pieces[imageSource]
  else return;
  
  var img = document.createElement("IMG");
  img.src = path + imageSource;
  img.setAttribute('id', imageId);
  document.getElementById(containerId).appendChild(img);
  return imageId;
}

function removePieceImage(imageId) {
  var elementToBeRemoved = document.getElementById(imageId);
  if (elementToBeRemoved == undefined) return;
  elementToBeRemoved.parentElement.removeChild(elementToBeRemoved);
}

//Mod Support

const welcomeMessage = '===========================\nWelcome to my Chess Game!\nSince you opened console, im going to assume you know what your doing.\nCommands:\nsetPos(pieceType, pieceColor, id)\nsetBoard(board)\ngetBoard()\n==========================='
console.log(welcomeMessage)

function setPos(pieceType, pieceColor, id) {
  $('#' + id).removeClass(($('#' + id).attr('class')).slice(11))
  $('#' + id).addClass(pieceColor + pieceType)
  drawBoard()
}

function getBoard() {
  let res = []
  let a = ''
  for (let i = 1; i <= 64; i++) {
    res.push(($('#' + i).attr('class')).slice(11))
  }
  console.log('Board Data: ' + res)
}

function setBoard(value) {
  if (value == 'blank') {
    for (let i = 1; i <= 64; i++) {
      $('#' + i).removeClass(($('#' + i).attr('class')).slice(11))
    }
    drawBoard()
  } else {
  	console.log(value)
    let board = value.split(',')
    console.log(board)
    for (let i = 1; i <= 64; i++) {
      $('#' + i).removeClass(($('#' + i).attr('class')).slice(11))
      $('#' + i).addClass(board[i - 1])
    }
    drawBoard()
  }
}

function moddedLogic(pieceType, pieceColor, id, row, column) {
  //There aren't any mods in the base game
}

function moddedCheckLogic(pieceType, pieceColor, id, row, column) {
  //There aren't any mods in the base game
}

function moddedReset() {
	//Still no mods in the base game
}
